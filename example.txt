/*
 * This method is much faster than using cexp()
 */
#define cmplx(float_value) (cosf(float_value) + sinf(float_value) * I)
#define cmplxconj(float_value) (cosf(float_value) + sinf(float_value) * -I)

You could also do something like this if your compiler doesn't like "I"

#define cmplxconj(float value) CMPLXF(cosf(float_value), -sinf(float_value))

So multiply the conjugate of the current phase value against the receive symbol
 
    complex float costasSymbol = decimatedSymbol * cmplxconj(get_phase());

    qpskDemodulate(costasSymbol, diBits);

Then update the loop error based on the phase detector error

    /*
     * The constellation gets rotated +45 degrees (rectangular)
     * from what was transmitted (diamond) with costas enabled
     */
    float d_error = phase_detector(costasSymbol);

    advance_loop(d_error);
    phase_wrap();
    frequency_limit();

    etc, etc...

